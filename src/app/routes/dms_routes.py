import base64
import io
import os

import flask
from flask import request, send_file

from app import app
from gembase_server_core.db.db_connection import DbConnection
from gembase_server_core.environment.runtime_constants import rr
from gembase_server_core.utils.gb_utils import GbUtils
from src.server.models.logs.logs_model import LogsModel
from src.server.models.user.user_model import UserModel
from src.session.session import gb_session
from src.session.session_helper import GbSessionHelper
from src.utils.gembase_utils import GembaseUtils


@app.get('/api/dms/<guid>')
def get_api_dms(guid: str):
    token: str | None = request.args.get('token')
    if token is None:
        flask.abort(404)
    row = gb_session().conn().select_one_or_none("""
    SELECT a.user_id, 
           a.mime, 
           d.dms_data 
      FROM app.dms a, 
           dms.dms d 
     WHERE a.guid = %s
       AND a.id = d.id
    """, [guid])
    if row is None:
        flask.abort(404)

    if row['user_id'] == 0:
        flask.abort(404)
    if row['user_id'] > 0:
        user_id = GbSessionHelper.get_user_id_from_token(
            conn=gb_session().conn(),
            token=token
        )
        if user_id is None or user_id != row["user_id"]:
            flask.abort(404)

    res = flask.send_file(io.BytesIO(row['dms_data']), mimetype=row['mime'])
    return res, 200


test_app_icon = b'iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAIAAABMXPacAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFbSURBVHhe7dExCsJQFEXBVDZCqjRCwCZbdTFZnHuwsVJslHASnMupP7w/w31eFAYgDkAcgDgAcQDiAMQBiAMQByAOQByAOABxAOIAxAGIAxAHIA5AHIA4AHEA4gDEAYgDEAcgDkAcgDgAcQDiAMQBiAMQByAOQByAOABxGwFcb6fh2Dtf3o7aJAAfBiAegHgA4gGIByAegHgA4gGIByAegHgA4gGIByAegHgHB/i5aXx+xJcb15cH9xqAOABxAOIAxAGIAxAHIA5AHIA4AHEA4gDEAYgDEAcgDkAcgDgAcQDiAMQBiAMQByAOQByAOABxAOIAxAGIAxAHIA5AHIA4AHEA4gDEAYgDEAcgDkAcgDgAcQDiAMQBiAMQByAOQByAOABxAOIAxO0V4G8CEAcgDkAcgDgAcQDiAMQBiAMQByAOQByAOABxAOIAxAGIAxAHIA5AHIA4AGnz8gAJ11mXxixD0gAAAABJRU5ErkJggg=='

concept_app_icon = b'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'

@app.get('/api/app_icon/<app_id>')
def get_app_icon(app_id: str):

    def return_concept_icon():
        concept_icon_bytes = flask.send_file(io.BytesIO(base64.b64decode(concept_app_icon)), mimetype="image/x-png")
        return concept_icon_bytes, 200

    if app_id == "opportunity":
        return return_concept_icon()

    token: str | None = request.args.get('token')
    if token is None:
        flask.abort(404)

    user_id = GbSessionHelper.get_user_id_from_token(
        conn=gb_session().conn(),
        token=token
    )

    if user_id is None:
        flask.abort(404)

    app_id_int = UserModel(
        conn=gb_session().conn(),
        user_id=user_id
    ).obfuscator().client_to_server(app_id)

    row = gb_session().conn().select_one_or_none("""
    SELECT a.icon
      FROM scraped_data.apps_icons a
     WHERE a.app_id_int = %s
    """, [app_id_int])

    icon_bytes = None

    if row is None:
        row_concept = gb_session().conn().select_one_or_none("""
        SELECT 1
          FROM scraped_data.apps_concepts a
         WHERE a.app_id_int = %s
        """, [app_id_int])
        if row_concept is not None:
            return return_concept_icon()
        else:
            if rr.is_prod():
                flask.abort(404)
            else:
                icon_bytes = base64.b64decode(test_app_icon)
    else:
        icon_bytes = row["icon"]

    res = flask.send_file(io.BytesIO(icon_bytes), mimetype="image/x-png")
    return res, 200


def __get_email_logo_path():
    return os.path.join(GbUtils.get_project_root_path(), "data", "resources", "gembase-email-logo-black.png")


@app.get('/email-logo/')
@app.get('/email-logo/<guid>')
def get__email_logo(guid: str | None = None):
    if guid is not None and guid != "" and GembaseUtils.is_guid(guid):
        conn = DbConnection()
        try:
            conn.query("""
            UPDATE archive.users_sent_emails SET opened_t = NOW() WHERE guid = %s AND opened_t IS NULL
            """, [guid])
        except Exception as e:
            LogsModel.server_error_log(
                title="Email logo",
                user_id=0,
                stacktrace="",
                exception=True
            )
        conn.commit()
        conn.close()
    return send_file(__get_email_logo_path(), mimetype="image/x-png"), 200

